
/********************************************************************************** 
* 
* The string "PAYPALISHIRING" is written in a zigzag pattern on a given number of rows like this: 
* (you may want to display this pattern in a fixed font for better legibility)
* 
* P   A   H   N
* A P L S I I G
* Y   I   R
* 
* And then read line by line: "PAHNAPLSIIGYIR"
* 
* Write the code that will take a string and make this conversion given a number of rows:
* 
* string convert(string text, int nRows);
* 
* convert("PAYPALISHIRING", 3) should return "PAHNAPLSIIGYIR".
* 
*               
**********************************************************************************/
#include <iostream>
#include <vector>
#include <string>
using namespace std;

string convert(string s, int nRows){
	//The cases no need to do anything
	if (nRows <= 1 || nRows >= s.size()) return s;
	vector<string> r(nRows);
	int row = 0;
	int step = 1;
	for(int i=0; i< s.size(); i++) {
		if(row == nRows - 1) step = -1;
		if(row == 0) step = 1;
		r[row] += s[i];
		row += step;
	}
	string result;
	for(int i=0; i< nRows; i++){
		result += r[i];
	}
	return result;
}

int main(int argc, char **argv){
	string s;
	int r;
	s = "PAYPALISHIRING";
	r = 3;
	cout << s << " : " << convert(s, 3) << endl;
	return 0;
}
/********************************************************************************** 
* 
* Given a 2D board and a word, find if the word exists in the grid.
* 
* The word can be constructed from letters of sequentially adjacent cell, 
* where "adjacent" cells are those horizontally or vertically neighboring. 
* The same letter cell may not be used more than once.
* 
* For example,
* Given board = 
* 
* [
*   ["ABCE"],
*   ["SFCS"],
*   ["ADEE"]
* ]
* 
* word = "ABCCED", -> returns true,
* word = "SEE", -> returns true,
* word = "ABCB", -> returns false.
* 
*               
**********************************************************************************/
#include <iostream>
#include <vector>
#include <string>
using namespace std;

//Recursive backtracking algorithm
bool exist(vector<vector<char> > &board, string word, int idx, int row, int col, vector< vector<int> > &mask) {
    int i = row;
    int j = col;
    if (board[i][j] == word[idx] && mask[i][j]==0 ) {
        mask[i][j]=1; //mark the current char is matched
        if (idx+1 == word.size()) return true;
        //checking the next char in `word` through the right, left, up, down four directions in the `board`.
        idx++; 
        if (( i+1<board.size()    && exist(board, word, idx, i+1, j, mask) ) ||
            ( i>0                 && exist(board, word, idx, i-1, j, mask) ) ||
            ( j+1<board[i].size() && exist(board, word, idx, i, j+1, mask) ) ||
            ( j>0                 && exist(board, word, idx, i, j-1, mask) ) )
        {
             return true;
        }
        mask[i][j]=0; //cannot find any successful solution, clear the mark. (backtracking)
    }

    return false;
}

bool exist(vector<vector<char> > &board, string word) {
    if (board.size()<=0 || word.size()<=0) return false;
    int row = board.size();
    int col = board[0].size();
    //using a mask to mark which char has been selected.
    //do not use vector<bool>, it has big performance issue, could cause Time Limit Error
    vector< vector<int> > mask(row, vector<int>(col, 0));

    for(int i=0; i<board.size(); i++) {
        for(int j=0; j<board[i].size(); j++){
            if ( board[i][j]==word[0] ){
                vector< vector<int> > m = mask;
                if( exist(board, word, 0, i, j, m) ){
                    return true;
                }
            }
        }
    }
    return false;
}

vector< vector<char> > buildBoard(char b[][5], int r, int c) {
    vector< vector<char> > board;
    for (int i=0; i<r; i++){
        vector<char> v(b[i], b[i]+c);
        cout << b[i] << endl;
        board.push_back(v);
    }
    cout << "----------" << endl;    
    return board;
}

int main(int argc, char** argv)
{
    string s;
    char b[3][5] ={ "ABCE", "SFCS", "ADEE" };
    vector< vector<char> > board = buildBoard(b, 3, 4);

    s = "SEE";
    cout << s << ":" << exist(board, s) << endl; 
    
    s = "ABCCED";
    cout << s << ":" << exist(board, s) << endl; 
    
    s = "ABCB";
    cout << s << ":" << exist(board, s) << endl; 


    if (argc>1){
        s = argv[1];
        cout << s << ":" << exist(board, s) << endl; 
    }

    cout << endl << "----------" << endl;    
    char b1[3][5] ={ "CAA", "AAA", "BCD" };
    board = buildBoard(b1, 3, 3);

    s = "AAB";
    cout << s << ":" << exist(board, s) << endl; 


    cout << endl << "----------" << endl;    
    char b2[3][5] ={ "ABCE", "SFES", "ADEE" };
    board = buildBoard(b2, 3, 4);

    s = "ABCESEEEFS";
    cout << s << ":" << exist(board, s) << endl; 

    cout << endl << "----------" << endl;    
    char b3[3][5] ={ "aaaa", "aaaa", "aaaa" };
    board = buildBoard(b3, 3, 4);

    s = "aaaaaaaaaaaaa";
    cout << s << ":" << exist(board, s) << endl; 

    return 0;
}
/**********************************************************************************
 *
 * Given a 2D board and a list of words from the dictionary, find all words in the board.
 *
 * Each word must be constructed from letters of sequentially adjacent cell, where "adjacent"
 * cells are those horizontally or vertically neighboring. The same letter cell may not be used
 * more than once in a word.
 *
 * For example,
 *   Given words = ["oath","pea","eat","rain"] and board =
 *
 *   [
 *     ['o','a','a','n'],
 *     ['e','t','a','e'],
 *     ['i','h','k','r'],
 *     ['i','f','l','v']
 *   ]
 *
 * Return ["eat","oath"].
 *
 * Note:
 * You may assume that all inputs are consist of lowercase letters a-z.
 *
 * click to show hint.
 *
 * You would need to optimize your backtracking to pass the larger test. Could you stop backtracking earlier?
 *
 * If the current candidate does not exist in all words' prefix, you could stop backtracking immediately.
 * What kind of data structure could answer such query efficiently? Does a hash table work? Why or why not?
 * How about a Trie? If you would like to learn how to implement a basic trie, please work on this problem:
 * Implement Trie (Prefix Tree) first.
 *
 **********************************************************************************/
#include <iostream>
using namespace std;
const int MAX_CHARS = 26;
class TrieNode{
public:
    TrieNode(string s):isWord(false), word(s){
        memset(children, 0, sizeof(children));
    }
    TrieNode* & operator [] (char ch){
        return children[(ch - 'a') % MAX_CHARS];
    }

    TrieNode* & operator [] (int idx) {
        return children[idx % MAX_CHARS];
    }

public:
    string word;
    string isWord;
private:

    //26个字符，也就是26叉树
    TrieNode* children[MAX_CHARS];
};

class TrieTree{
public:
    TrieTree():root(new TrieNode("")){}
    ~TrieTree(){
        freeTree(root);
    }
    TrieNode* getRoot(){
        return root;
    }
    void addWord(string& s){
        TrieNode *node = root;
        string t;
        for(int i=0; i< s.size(); i++){
            t += s[i];
            if((*node)[s[i]] == NULL){
                (*node)[s[i]] = new TrieNode(t);
            }
            node = (*node)[s[i]];

        }
        node->isWord = true;
    }


private:
    void freeTree(TrieNode* node){
        for(int i=0; i< MAX_CHARS; i++){
            if((*node)[i] != NULL){
                freeTree((*node)[i]);
            }
        }
        delete node;
    }
    TrieNode *root;
};

class Solution{
public:
    void findWords(vector<vector<char>>& board, TrieNode* root, int row, int col, vector<string>& result){
        if(row < 0 || col < 0 || row >= board.size() || col >= board[row].size() || board[row][col] == '\0') {
            return;
        }
        char ch = board[row][col];
        root = (*root)[ch];

        if(root == NULL) return;
        if(root->isWord){
            result.push_back(root->word);
            root->isWord = false;
        }

        board[row][col] = '\0';

        findWords(board, root, row, col-1, result);
        findWords(board, root, row, col+1, result);
        findWords(board, root, row+1, col, result);
        findWords(board, root, row-1, col, result);

        board[row][col] = ch;


    }

public:
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words){
        TrieTree t;
        for(int i=0; i< words.size(); i++){
            t.addWord(words[i]);
        }

        vector<string> result;
        for(int i=0; i< board.size(); i++){
            for(int j=0; j< board[i].size(); j++){
                findWords(board, t.getRoot(), i, j, result);
            }
        }
        return result;
    }
};

int main() {
    std::cout << "Hello, World!" << std::endl;
    return 0;
}

/***************************************************************************************
 *
 * Given a pattern and a string str, find if str follows the same pattern.
 *  Here follow means a full match, such that there is a bijection between a letter in
 * pattern and a non-empty word in str.
 *
 * Examples:
 *
 * pattern = "abba", str = "dog cat cat dog" should return true.
 * pattern = "abba", str = "dog cat cat fish" should return false.
 * pattern = "aaaa", str = "dog cat cat dog" should return false.
 * pattern = "abba", str = "dog dog dog dog" should return false.
 *
 * Notes:
 * You may assume pattern contains only lowercase letters, and str contains lowercase
 * letters separated by a single space.
 *
 * Credits:Special thanks to @minglotus6 for adding this problem and creating all test
 * cases.
 *
 ***************************************************************************************/
#include <iostream>
#include <vector>
#include <map>
using namespace std;
class Solution{
private:
    vector<string> split(string str, char delimiter){
        vector<string> internal;
        stringstream ss(str);
        string tok;
        while(getline(ss, tok, delimiter)){
            internal.push_back(tok);
        }
        return internal;
    }

public:
    bool wordPattern(string pattern, string str){
        unordered_map<char, string> dict_pattern;
        unordered_map<string, char> dict_string;
        int len = pattern.size();
        vector<string> strs = split(str, ' ');
        if(len != strs.size()) return false;
        for(int i=0; i< len; i++){
            char& ch = pattern[i];
            string& s = strs[i];
            if(dict_pattern.find(ch) == dict_pattern.end()){
                dict_pattern[ch] = s;
            }
            
            if(dict_string.find(s) == dict_string.end()){
                dict_string[s] = ch;
            }
            
            if(dict_pattern[ch] != s || dict_string[s] != ch){
                return false;
            }
            
            
            
            
        }
        return true;

    }
};


/**********************************************************************************
*
* Given two words (start and end), and a dictionary, find the length of shortest
* transformation sequence from start to end, such that:
*
* Only one letter can be changed at a time
* Each intermediate word must exist in the dictionary
*
* For example,
*
* Given:
* start = "hit"
* end = "cog"
* dict = ["hot","dot","dog","lot","log"]
*
* As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
* return its length 5.
*
* Note:
*
* Return 0 if there is no such transformation sequence.
* All words have the same length.
* All words contain only lowercase alphabetic characters.
*
*
**********************************************************************************/


// ---------------------------
//  BFS non-recursive method
// ---------------------------
//
//    Using BFS instead of DFS is becasue the solution need the shortest transformation path.
//
//    So, we can change every char in the word one by one, until find all possible transformation.
//
//    Keep this iteration, we will find the shorest path.
//
// For example:
//
//     start = "hit"
//     end = "cog"
//     dict = ["hot","dot","dog","lot","log","dit","hig", "dig"]
//
//                      +-----+
//        +-------------+ hit +--------------+
//        |             +--+--+              |
//        |                |                 |
//     +--v--+          +--v--+           +--v--+
//     | dit |    +-----+ hot +---+       | hig |
//     +--+--+    |     +-----+   |       +--+--+
//        |       |               |          |
//        |    +--v--+         +--v--+    +--v--+
//        +----> dot |         | lot |    | dig |
//             +--+--+         +--+--+    +--+--+
//                |               |          |
//             +--v--+         +--v--+       |
//        +----> dog |         | log |       |
//        |    +--+--+         +--+--+       |
//        |       |               |          |
//        |       |    +--v--+    |          |
//        |       +--->| cog |<-- +          |
//        |            +-----+               |
//        |                                  |
//        |                                  |
//        +----------------------------------+
//
//     1) queue <==  "hit"
//     2) queue <==  "dit", "hot", "hig"
//     3) queue <==  "dot", "lot", "dig"
//     4) queue <==  "dog", "log"
//


class Solution{
public:
    int ladderLength(string start, string end, unordered_set<string> &dict){
        // Using a map for two purposes;
        // 1) store the distince so far
        // 2) remove the duplication
        map<string, int> dis;
        dis[start] = 1;

        queue<string> q;
        q.push(start);
        while(!q.empty()){
            string word = q.front();
            q.pop();
            if(word == end){
                break;
            }

            for(int i=0; i< word.size(); i++){
                string temp = word;
                for(char c='a'; c <= 'z'; c++){
                    temp[i] = c;
                    if(dict.count(temp) >0 && dis.count(temp)== 0){
                        dis[temp] = dis[word] + 1;
                        q.push(temp);
                    }
                }
            }
        }
        return (dis.count(end) == 0) ? 0 : dis[end];
    }
};

