
/**********************************************************************************
*
* Given two words (start and end), and a dictionary, find all shortest transformation
* sequence(s) from start to end, such that:
*
* Only one letter can be changed at a time
* Each intermediate word must exist in the dictionary
*
* For example,
*
* Given:
* start = "hit"
* end = "cog"
* dict = ["hot","dot","dog","lot","log"]
*
* Return
*
*   [
*     ["hit","hot","dot","dog","cog"],
*     ["hit","hot","lot","log","cog"]
*   ]
*
* Note:
*
* All words have the same length.
* All words contain only lowercase alphabetic characters.
*
*
**********************************************************************************/
#include <iostream>
#include <vector>
#include <map>
#include <queue>
#include <unordered_set>
using namespace std;

// Solution
//
//      1) Using BSF algorithm build a tree like below
//      2) Using DSF to parse the tree to the transformation path.
//
// For example:
//
//     start = "hit"
//     end = "cog"
//     dict = ["hot","dot","dog","lot","log","dit","hig", "dig"]
//
//                      +-----+
//        +-------------+ hit +--------------+
//        |             +--+--+              |
//        |                |                 |
//     +--v--+          +--v--+           +--v--+
//     | dit |    +-----+ hot +---+       | hig |
//     +--+--+    |     +-----+   |       +--+--+
//        |       |               |          |
//        |    +--v--+         +--v--+    +--v--+
//        +----> dot |         | lot |    | dig |
//             +--+--+         +--+--+    +--+--+
//                |               |          |
//             +--v--+         +--v--+       |
//        +----> dog |         | log |       |
//        |    +--+--+         +--+--+       |
//        |       |               |          |
//        |       |    +--v--+    |          |
//        |       +--->| cog |<-- +          |
//        |            +-----+               |
//        |                                  |
//        |                                  |
//        +----------------------------------+

map< string, unordered_set<string> >& buildTree(string& start, string& end, unordered_set<string> &dict){
    static map< string, unordered_set<string> > parents;
    parents.clear();

    unordered_set<string> level[3];
    unordered_set<string> *previousLevel = &level[0];
    unordered_set<string> *currentLevel = &level[1];
    unordered_set<string> *newLevel = &level[2];
    unordered_set<string> *p = NULL;
    currentLevel->insert(start);

    bool reachEnd = false;

    while( !reachEnd ){
        newLevel->clear();
        for(auto it = currentLevel->begin(); it != currentLevel->end(); it++){
            for(int i=0; i< it->size(); i++){
                string newWord = *it;
                for(char c = 'a'; c <='z'; c++){
                    newWord[i] = c;
                    if(newWord == end){
                        reachEnd = true;
                        parents[*it].insert(end);
                        continue;
                    }
                    if(dict.count(newWord)==0 || currentLevel->count(newWord)>0 || previousLevel->count(newWord)>0){
                        continue;
                    }
                    newLevel->insert(newWord);
                    parents[*it].insert(newWord);
                }
            }
        }

        if(newLevel->empty()) break;
        p = previousLevel;
        previousLevel = currentLevel;
        currentLevel = newLevel;
        newLevel = p;
    }
    if(!reachEnd){
        parents.clear();
    }
    return  parents;

};

void generatePath(string start, string end, map< string, unordered_set<string> > &parents, vector<string> path, vector< vector<string> > &paths){
    if(parents.find(start) == parents.end()){
        if(start == end){
            paths.push(path);
        }
        return;
    }

    for(auto it=parents[start].begin(); it!=parents[start].end(); it++){
        path.push_back(*it);
        generatePath(*it, end, parents, path, paths);
        path.pop_back();
    }
}

vector< vector<string> > findLadders(string start, string end, unordered_set<string> &dict){
    vector< vector<string> > ladders;
    vector<string> ladder;
    ladder.push_back(start);
    if(start == end){
        ladder.push_back(end);
        ladders.push_back(ladder);
        return ladders;
    }

    map< string, unordered_set<string> >& parents = buildTree(start, end, dict);
    if(parents.size <= 0){
        return ladders;
    }

    generatePath(start, end, parents, ladder, ladders);
    return ladders;
}

void printLadders(vector< vector<string> > &ladders){
    int i, j;
    for (i=0; i<ladders.size(); i++){
        for (j=0; j<ladders[i].size()-1; j++){
            cout << ladders[i][j] << " -> ";
        }
        cout << ladders[i][j] << endl;
    }
}


int main(int argc, char** argv){
    string start = "hit";
    string end = "cog";
    unordered_set<string> dict ({"bot","cig", "cog", "dit", "dut", "hot", "hit" ,"dot","dog","lot","log"});
    vector< vector<string> > ladders;
    ladders = findLadders(start, end, dict);
    printLadders(ladders);
    return 0;
}

/**********************************************************************************
*
* Given a string s and a dictionary of words dict, determine if s can be segmented
* into a space-separated sequence of one or more dictionary words.
*
* For example, given
* s = "leetcode",
* dict = ["leet", "code"].
*
* Return true because "leetcode" can be segmented as "leet code".
*
*
**********************************************************************************/

#include <iostream>
#include <vector>
#include <set>
using namespace std;

bool wordBreak(string s, set<string> &dict){
    //using an array to mark subarray from 0 to i can be broken or not
    vector<bool> v(s.size(), false);
    for(int i=0; i< s.size(); i++){
        //check the substring from 0 to 1 is int dict or not
        string w = s.substr(0, i+1);
        v[i] = (dict.find(w) != dict.end());

        //if it is , then use greedy algorithm
        if(v[i]) continue;
        //if it is not, then break it to check
        for(int j=0; j< i; j++){
            //if the substring from 0 to j can be broken, then check the substring from j to i
            if(v[j] == true){
                w = s.substr(j+1, i-j);
                v[i] = (dict.find(w) != dict.end());
                if(v[i]) break;
            }
        }
    }
    return v.size() ? v[v.size()-1] : false;
}

int main(){
    string s;
    set<string> dict;

    s = "a";
    dict.insert("a");
    cout << wordBreak(s, dict) << endl;

    dict.clear();
    s = "dogs";
    string d[] = {"dog", "s", "gs"};
    dict.insert(d, d+3);
    cout << wordBreak(s, dict) << endl;
    return 0;
}

/////////////////////////////////////
#include <iostream>
#include <stdio.h>
/**
 * 123456789
 * 6 7 8 9  1 2 3 4 5
 */
using namespace std;
void ReverseString(char* s, int from , int to){
    while(from < to){
        char t = s[from];
        s[from++] = s[to];
        s[to--] = t;
    }
}

void LeftRotateString(char *s, int n, int m){
    m %= n;
    ReverseString(s, 0, m-1);
    ReverseString(s, m, n-1);
    ReverseString(s, 0, n-1);
}

int main(void){

    char s[] = "123456789";
    LeftRotateString(s, 10, 5);

    for(int i=0; i< sizeof(s)/ sizeof(char); i++){
        cout << s[i] << " ";
    }
    cout << " " << endl;

    return 0;
}


//////////////////////////
//lcs最长公共子序列
//记得不是最长公共字串
#include <iostream>

#include <vector>
#include <set>
#include <stdio.h>
using namespace std;
/*
 * 算法思路：
 * 使用二维数组C[m, n]
 * c[i, j]记录序列Xi和Yj的最长公共子序列的长度
 * 当i=0或j=0时，空序列是Xi和 Yj的最长公共子序列，故c[i, j]=0
 * c(i, j) = 0 //当i=0或 j=0
 * c(i, j) = c(i-1, j-1) + 1 //当i>0, j>0且Xi=Yj
 * max{c(i-1, j), c(i, j-1)} //当i>0, j>0且Xi != Yj
 */

void LCS(const char* str1, const char* str2, string& str){
    int size1 = (int)strlen(str1);
    int size2 = (int)strlen(str2);
    const char* s1 = str1 - 1;
    const char* s2 = str2 - 1;
    vector< <vector<int> > chess(size1+1, vector<int>(size2+1));
    int i, j;
    for(i=0; i< size1; i++) chess[i][0] = 0;//第0列
    for(j=0; j< size2; j++) chess[0][j] = 0;//第0行
    for(i=1; i<= size1; i++){
        for(j=1; j<= size2; j++){
            if(s1[i] == s2[j]){
                chess[i][j] = chess[i-1][j-1] + 1;

            }else{
                chess[i][j] = max(chess[i][j-1], chess[i-1][j]);
            }
        }
    }

    i = size1;
    j = size2;

    while((i!=0) && (j!=0)){
        if(s1[i] == s2[j]){
            str.push_back(s1[i]);
            i--;
            j--;
        }
        else{
            if(chess[i][j-1] > chess[i-1][j]){
                j--;
            }else{
                i--;
            }
        }
    }
    reverse(str.begin(), str.end());
}


int main(){
    const char* str1 = "TCGGATCGACTT";
    const char* str2 = "AGCCTACGTA";
    string str;
    LCS(str1, str2, str);
    cout << str.c_str() << endl;

}
//////////////////////////
#include <iostream>
#include <stdio.h>
/*
 * dfs:没有重复元素的全排列问题
 */
void Print(const int* a, int size){
    for(int i=0; i< size; i++){
        cout << a[i] << ' ';
    }
    cout << endl;
}

void Permutation(int* a, int size, int n){
    if(n == size -1){
        Print(a, size);
        return;
    }
    for(int i=n; i< size; i++){
        swap(a[i], a[n]);
        Permutation(a, size, n+1);
        swap(a[i], a[n]);
    }
}

int main(int argc, char* argv[]){
    int a[] = {1,2,3,4};
    Permutation(a, sizeof(a)/ sizeof(int), 0);
    return 0;
}
//////////////////
#include <iostream>
#include <stdio.h>
/*
 * dfs:有重复元素的全排列问题
 */


void Print(const int* a, int size){
    for(int i=0; i< size; i++){
        cout << a[i] << ' ';
    }
    cout << endl;
}

void Permutation(int* a, int size, int n){
    if(n == size -1){
        Print(a, size);
        return;
    }
    for(int i=n; i< size; i++){
        if(!IsDuplicate(a, n, i)) continue;//a[i]是否与 [n, i)重复
        swap(a[i], a[n]);
        Permutation(a, size, n+1);
        swap(a[i], a[n]);
    }
}
//目的：简化时间复杂度，用空间换时间
void Permutation1(char* a, int size, int n){
    if(n == size-1){
        Print(a, size);
        return;
    }
    int dup[256] = {0};
    for(int i=n; i< size; i++){
        if(dup[a[i]] == 1)
            continue;
        dup[a[i]] = 1;
        swap(a[i], a[n]);
        Permutation1(a, size, n+1);
        swap(a[i], a[n]);
    }
}
int main(int argc, char* argv[]){
    int a[] = {1,2,3,4};
    Permutation(a, sizeof(a)/ sizeof(int), 0);
    return 0;
}
///////////////////////
#include <iostream>
#include <stdio.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#include <iostream>
#include <string>
#include <vector>
#include <set>
#include <map>
using namespace std;
/**********************************************************************************
*
* Given a string s and a dictionary of words dict, add spaces in s to construct a sentence
* where each word is a valid dictionary word.
*
* Return all such possible sentences.
*
* For example, given
* s = "catsanddog",
* dict = ["cat", "cats", "and", "sand", "dog"].
*
* A solution is ["cats and dog", "cat sand dog"].
*
*
**********************************************************************************/
// ---------------
//  Recursive Way
// ---------------
// The recursive method is quite straight forward.
//
//    1) if a substring from 0 to i is a word, then take the rest substring to evaluate.
//    2) during the recursion, keep tracking the result
//
//  For example:
//
//    s = "catsanddog",
//    dict = ["cat", "cats", "and", "sand", "dog"].
//
//
//                            +---> sand / dog ---> dog
//                            |
//         +-------> cat / sanddog
//         |
//       catsanddog
//          |
//          +------> cats / anddog
//                            |
//                            +----> and / dog ---> dog
//
//
// However, the recursive could produce a lot duplicated calculation, we need use a cache to avoid.
//


// To avoid time limit error, need to add cache

vector<string> wordBreak(string s, set<string> &dict, map<string, vector<string> >& cache){
    if(cache.find(s) != cache.end){
        return cache[s];
    }
    vector<string> result;
    for(int i=0; i< s.size(); i++){
        string w = s.substr(0, i+1);
        if(dict.find(w) != dict.end()){
            if(i == s.size() - 1){
                result.push_back(w);
                break;
            }

            vector<string> ret = wordBreak(s.substr(i+1, s.size()-i-1), dict, cache);
            for(int j=0; j< ret.size(); j++){
                result.push_back(w + " " + ret[j]);
            }
        }
    }
    cache[s] = result;
    return result;

}





//---------------------
// Dynamic Programming
//---------------------
//
//  Define substring[i, j] is the sub string from i to j.
//
//       (substring[i,j] == word) :   result[i] = substring[i,j] + {result[j]}
//
//      So, it's better to evaluate it backword.
//
//  For example:
//
//    s = "catsanddog",
//    dict = ["cat", "cats", "and", "sand", "dog"].
//
//       0  c  "cat"  -- word[0,2] + {result[3]}  ==> "cat sand dog"
//             "cats" -- word[0,3] + {result[4]}  ==> "cats and dog"
//       1  a  ""
//       2  t  ""
//       3  s  "sand" --  word[3,6] + {result[7]} ==> "sand dog"
//       4  a  "and"  --  word[4,6] + {result[7]} ==> "and dog"
//       5  n  ""
//       6  d  ""
//       7  d  "dog"
//       8  o  ""
//       9  g  ""

vector<string> wordBreak_dp(string s, set<string> &dict){
    vector< vector<string> > result(s.size());
    for(int i= s.size()-1; i>=0; i--){
        vector<string> v;
        result[i] = v;
        for(int j=i+1; j< s.size(); j++){
            string word = s.substr(i, j-i);
            if(dict.find(word) != dict.end()){
                if(j == s.size()){
                    result[i] = push_back(word);
                }else{
                    for(int k=0; k< result[j].size(); k++){
                        result[i].push_back(word + " " + result[j][k]);
                    }
                }
            }
        }
    }
}






vector<string> wordBreak(string s, set<string> &dict){
    vector<string> result;
    switch (random() % 3){
        case 0:
        {
            cout << "---------Recursive Solution--------" << endl;
            //递归
            string str;
            wordBreak(s, dict, str, result);

        }
        break;

        case 1:
        {
            cout << "----Memorized Recursive Solution----" << endl;
            map<string, vector<string> > cache;
            result = wordBreak(s, dict, cache);
        }
        break;

        case 2:
            cout << "----Dynamic Programming Solution----" << endl;
            result = wordBreak_dp(s, dict);
            break;
    }
    return result;
}


void printVector(vector<string>& v){
    for(int i=0; i< v.size(); i++){
        cout << v[i] << endl;
    }
}

int main(){
    srand(time(NULL));
    string d[] = {"cat", "cats", "and", "sand", "dog"};
    set<string> dict(d, d+5);
    string s = "catsanddog";
    vector<string> v = wordBreak(s, dict);
    printVector(v);

    string d0[] = {"apple","app","le","pie"};
    dict.clear();
    dict.insert(d0, d0+4);
    s = "applepie";
    v = wordBreak(s, dict);
    printVector(v);

    string d1[]={"aaaa","aa","a"};
    dict.clear();
    dict.insert(d1, d1+3);
    s = "aaaaaaa";
    v = wordBreak(s, dict);
    printVector(v);

    string d5[]={"a","aa","aaa","aaaa","aaaaa","aaaaaa","aaaaaaa","aaaaaaaa","aaaaaaaaa","aaaaaaaaaa"};
    dict.clear();
    dict.insert(d5, d5+10);
    s="aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab";
    v = wordBreak(s, dict);
    printVector(v);

    return 0;
}
////////////////////////////////////

#include <iostream>
#include <stdio.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#include <iostream>
#include <string>
#include <vector>
#include <set>
#include <map>
using namespace std;
//非递归的全排列算法
//核心是每一步找出刚好比当前排列大一点的那个排列值


void Reverse(int *from, int* to){
    int t;
    while(from < to){
        t = *from;
        *from = *to;
        *to = *from;
        from++;
        to--;
    }
}

bool GetNextPermutation(int* a, int size){
    //后找
    int i = size - 2;
    while((i>=0) && (a[i] >= a[i+1]))
        i--;
    if(i < 0)
        return false;
    //小大
    int j = size-1;
    while(a[j] <= a[i]){
        j--;
    }

    //交换
    swap(a[j], a[i]);
    //翻转
    Reverse(a+i+1, a+size-1);
    return true;
}
//for example:1 2 3.5 5 3
int main(int argc, char* argv[]){
    int a[] = {1, 2, 3, 4};
    int size = sizeof(a)/sizeof(int);
    Print(a, size);
    while(GetNextPermutation(a, size)){
        Print(a, size);
    }
    return 0;
}
////////////////
#include <iostream>
#include <stdio.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
#include <set>
#include <map>
using namespace std;
//使用c++ stl的next_permutation来做全排列
int main(){
    int a[3];
    a[0] = 1;
    a[2] = 2;
    a[3] = 3;
    do{
        cout << a[0] << " " << a[1] << " " << a[2] << endl;

    }while(next_permutation(a, a+3));
}

///////////////
#include <iostream>
#include <stdio.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <cstdio>
#include <cstring>
const int maxl = 1000000;
using namespace std;
//最长回文字串
//ADDCDA->DCD
//ABBA ABA
//用manacher算法
void Manacher(char* s, int *P){
    int size = strlen(s);
    P[0] = 1;
    int id = 0;
    int mx = 1;
    for(int i=1; i< size; i++){
        if(mx > i){
            P[i] = min(P[2*id-i], mx-i);
        }else{
            P[i] = 1;
        }

        for(; s[i+P[i]] == s[i-P[i]]; P[i]++);
        if(mx < i+P[i]){
            mx = i+P[i];
            id = i;
        }
    }
}
////////////////////////
